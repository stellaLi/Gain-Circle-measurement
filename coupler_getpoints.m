%% Set up GPIB Connection
% connection via GPIB test
% data available

% Find a GPIB object.
obj1 = instrfind('Type', 'gpib', 'BoardIndex', 0, 'PrimaryAddress', 17, 'Tag', '');

% Create the GPIB object if it does not exist
% otherwise use the object that was found.
if isempty(obj1)
    obj1 = gpib('NI', 0, 17);
else
    fclose(obj1);
    obj1 = obj1(1)
end

% Connect to instrument object, obj1.
fopen(obj1);

% Communicating with instrument object, obj1.
fprintf(obj1, ':CALC1:PAR1:DEF S33');
fprintf(obj1, ':CALC1:FORM SCOM');
data1 = query(obj1, ':CALC1:MARK1:Y?');
fprintf(obj1, ':CALC1:PAR1:DEF S21');
fprintf(obj1, ':CALC1:FORM MLOG');
data2 = query(obj1, ':CALC1:MARK1:Y?');

% Disconnect from instrument object, obj1.
fclose(obj1);

% Test if data valid
datanum1 = str2num(data1);
datanum2 = str2num(data2);


%% Set up switch connection
% Object defination
MyZT = NET.addAssembly('C:\Windows\SysWOW64\mcl_RF_Switch_Controller64.dll');
obj2 = mcl_RF_Switch_Controller64.USB_RF_SwitchBox;

% Connect device
obj2.Connect();

% Switch change
obj2.Set_Switch('D',0);
obj2.Disconnect();

%% Measurement Setup

max_point = 5;


%% Measurement-get points

% Connect to instrument object, obj1.
fopen(obj1);
obj2.Connect();

% RAM for Measurement
i = 1;

% Measure S21 
fprintf(obj1, ':CALC1:PAR1:DEF S44');
fprintf(obj1, ':CALC1:FORM SCOM');

% Figure for measurment result
figure(1);
% Figure for user interaction
figure(2);

while (i < max_point)
    figure(2);
    userpress = waitforbuttonpress;
    data1 = query(obj1, ':CALC1:MARK1:Y?');
    datanum1 = str2num(data1);
    obj2.Set_Switch('D',1);
    pause(1);
    fprintf(obj1, ':CALC1:PAR1:DEF S21');
    fprintf(obj1, ':CALC1:FORM MLOG');
    tmp21 = query(obj1, ':CALC1:MARK1:Y?');
    tmp21Num = str2num(tmp21);
    
    fprintf(obj1, ':CALC1:PAR1:DEF S31');
    fprintf(obj1, ':CALC1:FORM MLOG');
    tmp31 = query(obj1, ':CALC1:MARK1:Y?');
    tmp31Num = str2num(tmp31);
    
    datanum2 = tmp31Num - tmp21Num - 20;
    
    imped(i,:) = datanum1;
    S21(i,:) = datanum2;
    i = i+1;
    obj2.Set_Switch('D',0);
    pause(1);
    fprintf(obj1, ':CALC1:PAR1:DEF S44');
    fprintf(obj1, ':CALC1:FORM SCOM');
    pause(1);
end
fclose(obj1);
obj2.Disconnect();

%%
x = imped(:,1);
y = imped(:,2);
z = S21;

%% fitting
%function [fitresult, gof] = createFit(x, y, z)
%CREATEFIT(X,Y,Z)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x
%      Y Input : y
%      Z Output: z
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 14-Mar-2016 17:21:49


%% Fit: 'untitled fit 1'.
[xData, yData, zData] = prepareSurfaceData( x, y, z );

% Set up fittype and options.
ft = fittype( 'poly22' );

% Fit model to data.
[fitresult, gof] = fit( [xData, yData], zData, ft );

% Plot fit with data.
figure( 'Name', 'untitled fit 1' );
h = plot( fitresult, [xData, yData], zData );
legend( h, 'untitled fit 1', 'z vs. x, y', 'Location', 'NorthEast' );
% Label axes
xlabel x
ylabel y
zlabel z
grid on
view( -40.5, 12.0 );


